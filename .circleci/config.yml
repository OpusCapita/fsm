defaults: &defaults
  docker:
    - image: opuscapita/minsk-core-ci:grails-2.4.4-jdk-8u131-nodejs-8.9.4-maven-3.3.9
  working_directory: ~/build

version: 2
jobs:
  build:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh
      - checkout
      - run:
          name: save-cache-checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum

      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-

      - run:
          name: bootstrap (install dependencies)
          # we use --unsafe-perm as current build using root user which fails
          command: npm install --unsafe-perm

      - save_cache:
          key: dependencies-{{ checksum "/tmp/cache-checksum" }}
          paths:
            - ./package-lock.json
            - ./node_modules
            - ./packages/core/package-lock.json
            - ./packages/core/node_modules
            - ./packages/editor/package-lock.json
            - ./packages/editor/node_modules
            - ./packages/history/package-lock.json
            - ./packages/history/node_modules
            - ./packages/task-manager/package-lock.json
            - ./packages/task-manager/node_modules
            - ./packages/examples/invoice-console/package-lock.json
            - ./packages/examples/invoice-console/node_modules
            - ./packages/examples/process-task-manager-ui/package-lock.json
            - ./packages/examples/process-task-manager-ui/node_modules
            - ./packages/examples/complete-demo/package-lock.json
            - ./packages/examples/complete-demo/node_modules

      - run:
          name: lint
          command: npm run lint

      - run:
          name: test
          command: npm test

      - run:
          name: build-and-deploy-gh-pages
          command: |
            cd packages/editor
            ./scripts/gh-pages/build.sh
            ./scripts/gh-pages/deploy.sh .gh-pages-tmp

      - store_artifacts:
          path: ./test-results

      - store_test_results:
          path: ./test-results

  build_release:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh

      - checkout
      - run:
          name: save-cache-checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum

      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            - dependencies-

      - run:
          name: bootstrap (install dependencies)
          # we use --unsafe-perm as current build using root user which fails
          command: npm install --unsafe-perm

      - save_cache:
          key: dependencies-{{ checksum "/tmp/cache-checksum" }}
          paths:
            - ./package-lock.json
            - ./node_modules
            - ./packages/core/package-lock.json
            - ./packages/core/node_modules
            - ./packages/editor/package-lock.json
            - ./packages/editor/node_modules
            - ./packages/history/package-lock.json
            - ./packages/history/node_modules
            - ./packages/task-manager/package-lock.json
            - ./packages/task-manager/node_modules
            - ./packages/examples/invoice-console/package-lock.json
            - ./packages/examples/invoice-console/node_modules
            - ./packages/examples/process-task-manager-ui/package-lock.json
            - ./packages/examples/process-task-manager-ui/node_modules

      - run:
          name: lint
          command: npm run lint

      - run:
          name: test
          command: npm test

      - run:
          name: "Publish release."
          command: npm run publish-release

      - run:
          name: Build and deploy gh-pages editor demo
          command: |
           cd packages/editor
           bash ./scripts/gh-pages/build.sh
           bash ./scripts/gh-pages/deploy.sh .gh-pages-tmp

      - store_artifacts:
          path: ./packages/core/test-results.xml
          prefix: core

      - store_artifacts:
          path: ./packages/editor/test-results.xml
          prefix: editor

      - store_artifacts:
          path: ./packages/task-manager/test-results.xml
          prefix: task-manager

      - store_artifacts:
          path: ./packages/history/test-results.xml
          prefix: history

      - store_test_results:
          path: ./junit

  release:
    <<: *defaults
    steps:

      - run:
          name: Environment inject
          command: env_inject.sh

      - checkout

      - run:
          name: Executing release scrtipt.
          command: .circleci/release.sh

  deploy-demo:
    <<: *defaults
    steps:
      - run:
          name: Environment inject
          command: /bin/env_inject.sh

      - checkout
      - setup_remote_docker

      - run:
          name: save-cache-checksum
          command: find -name "package.json" | xargs cat > /tmp/cache-checksum

      - restore_cache:
          keys:
            - dependencies-{{ checksum "/tmp/cache-checksum" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-

      - run:
          name: Deploy docker demo image
          command: .circleci/scripts/deploy-docker-image.sh

      - run:
          name: Deploy demo installation
          command: |
            az login -u "${AZURE_USER}" -p "${AZURE_PASS}" &> /tmp/az-login.log
            az aks get-credentials -g ${MINSK_CORE_K8S_AZURE_RG} -n ${MINSK_CORE_K8S_AZURE_NAME}
            helm init --client-only
            .helm/install.sh

workflows:
  version: 2
  release-and-build-all:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - gh-pages
                - release
      - release:
          filters:
            branches:
              only: release
      - build_release:
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      - deploy-demo:
          requires:
            - build

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - azure-maintenance
